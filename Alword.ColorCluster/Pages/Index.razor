@page "/"
@using Blazor.Extensions.Canvas.Canvas2D;
@using Blazor.Extensions;
@using Alword.ColorCluster.Properties;
@using System.Drawing;
@inject SeparatingService dots;
@inject BrowserService service;
<div @onpointerup=PointerUp style="
    position: fixed;
    left: 50%;
    top: 50%;
    border: solid;
    padding:0 !important;
    transform: translate(-50%, -50%);">
    <BECanvas Width="CanvasHeight"
              Height="CanvasWidth"
              @ref="_canvasReference"></BECanvas>
    <div style="position: fixed;">
        <button @onclick="ChangeColor">@Color</button>
        <button @onclick="CalculateLine">@Strings.Separate</button>
    </div>
</div>

@code
{
    private Canvas2DContext ctx;
    protected BECanvasComponent _canvasReference;
    public int Height { get; private set; }
    public int Width { get; private set; }
    public int CanvasHeight { get; } = 600;
    public int CanvasWidth { get; } = 600;

    public string Color { get; set; } = Strings.Red;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.ctx = await this._canvasReference.CreateCanvas2DAsync();
        }
    }

    async Task PointerUp(PointerEventArgs e)
    {
        await GetDimensions();
        double startX = (Width - CanvasWidth) / 2;
        double startY = (Height - CanvasHeight) / 2;

        int x = (int)Math.Round(e.ClientX - startX);
        int y = (int)Math.Round(e.ClientY - startY);
        var point = new Point(x, y);
        if (x < 0 || x > CanvasWidth || y < 0 || y > CanvasHeight) return;

        await ctx.BeginPathAsync();
        await ctx.ArcAsync(x, y, 2, 0, 2 * Math.PI);
        await ctx.ClosePathAsync();
        if (Color == Strings.Red)
        {
            dots.AddPrimary(point);
            await ctx.SetFillStyleAsync("red");
        }
        else
        {
            dots.AddSecondary(point);
            await ctx.SetFillStyleAsync("blue");
        }
        await ctx.FillAsync();
        StateHasChanged();
    }

    async Task GetDimensions()
    {
        var dimension = await service.GetDimensions();
        Height = dimension.Height;
        Width = dimension.Width;
    }

    void ChangeColor()
    {
        if (Color == Strings.Red)
            Color = Strings.Blue;
        else
            Color = Strings.Red;
    }

    async Task CalculateLine()
    {
        var line = dots.Separate();
        await ctx.BeginPathAsync();
        await ctx.MoveToAsync(line.Point1.X, line.Point1.Y);
        await ctx.LineToAsync(line.Point2.X, line.Point2.Y);
        await ctx.StrokeAsync();
        await ctx.SetStrokeStyleAsync("green");
        await ctx.FillAsync();
        await ctx.ClosePathAsync();
        StateHasChanged();
    }
}
